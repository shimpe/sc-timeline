TITLE:: ScTimeline
summary:: a timeline for supercollider patterns
categories:: Patterns
related:: Classes/ScTimelinePlotter

DESCRIPTION::
ScTimeline provides a way to schedule patterns in time. Patterns can be scheduled on beats or on absolute times.
By wrapping Synths that play buffers in Pmono, it can also be used to algorithmically generate soundscapes.



CLASSMETHODS::

METHOD:: new
New creates a new ScTimeline

returns:: a new ScTimeline

INSTANCEMETHODS::

METHOD:: internalcounter
	an internal counter, used to track internally generated event stream players (internal usage only)
	

returns:: a unique integer
METHOD:: internallist
	internal list to store internally generated patterns (internal usage only)
	

returns:: a list
METHOD:: internalabssched
	list to store internally generated abs time scheduling information (internal usage only)
	

returns:: a list
METHOD:: internalplayers
	dictionary to store internally generated event stream players (internal usage only)
	

returns:: an event (dictionary)
METHOD:: internalplotlist
	list to store internally generated data, used to plot the timeline (internal usage only)
	

returns:: a list
METHOD:: plotter
	an ScTimelinePlotter object that knows how to plot the timing data as a timeline (internal usage only)
	

returns:: an ScTimelinePlotter instance
METHOD:: init
	Initializes internal data structures
	

returns:: this instance of ScTimeline

METHOD:: schedBeat
	Runs a pattern from a given start_beat to a given stop_beat. Infinitely running patterns are cut off at the stop_beat. You can specify a name and a color which will be used when plotting the timeline.
	

ARGUMENT:: start_beat
beat at which the pattern should start playing

ARGUMENT:: stop_beat
beat at which the pattern should stop playing (will be cut off if needed)

ARGUMENT:: pattern
the pattern (a Pbind or Pmono-like pattern) to schedule

ARGUMENT:: name
a string that will be used when plotting the timeline. All entries with the same name are plotted in the same lane.

ARGUMENT:: color
a supercollider Color that will be used when plotting the timeline

returns:: nil
METHOD:: schedTime
	Runs a pattern from a given start_time (in seconds) for a given duration. Infinitely running patterns are cut off after duration. You can specify a name and a color which will be used when plotting the timeline.
	

ARGUMENT:: delta_time
time at which the pattern should be started

ARGUMENT:: duration
duration after which the pattern should be stopped

ARGUMENT:: pattern
the pattern (a Pbind or Pmono-like pattern) to schedule

ARGUMENT:: name
a string that will be used when plotting the timeline. All entries with the same name are plotted in the same lane.

ARGUMENT:: color
a supercollider Color that will be used when plotting the timeline

returns:: nil
METHOD:: schedTimeFromTo
	Runs a pattern from a given start_time (in seconds) to a given stop_time (in seconds). Infinitely running patterns are stopped after stop_time. You can specify a name and a color which will be used when plotting the timeline.
	

ARGUMENT:: delta_time_start
time at which the pattern should be started

ARGUMENT:: delta_time_stop
time at which the pattern should be stopped

ARGUMENT:: pattern
the pattern (a Pbind or Pmono-like pattern) to schedule

ARGUMENT:: name
a string that will be used when plotting the timeline. All entries with the same name are plotted in the same lane.

ARGUMENT:: color
a supercollider Color that will be used when plotting the timeline

returns:: this instance of ScTimeline

METHOD:: schedBeatNumber
	Runs a pattern from a given beat until it has produced a given number of events. Longer running patterns are cut off if needed. You can specify a name and a color which will be used when plotting the timeline.
	

ARGUMENT:: start_beat
beat at which the pattern should be started

ARGUMENT:: no_of_events
max number of events after which the pattern should be stopped

ARGUMENT:: pattern
the pattern (a Pbind or Pmono-like pattern) to schedule

ARGUMENT:: name
a string that will be used when plotting the timeline. All entries with the same name are plotted in the same lane.

ARGUMENT:: color
a supercollider Color that will be used when plotting the timeline

returns:: nil
METHOD:: schedTimeNumber
	Runs a pattern from a given start_time (in seconds) until it has produced no_of_events events. Longer running patterns are cut off after producing no_of_events events. You can specify a name and a color which will be used when plotting the timeline.
	

ARGUMENT:: delta_time
time at which the pattern should be started

ARGUMENT:: no_of_events
number of events after which the pattern should be stopped

ARGUMENT:: pattern
the pattern (a Pbind or Pmono-like pattern) to schedule

ARGUMENT:: name
a string that will be used when plotting the timeline. All entries with the same name are plotted in the same lane.

ARGUMENT:: color
a supercollider Color that will be used when plotting the timeline

returns:: nil
METHOD:: playAbsAfter
	Plays only those patterns scheduled using times, that were scheduled after start_time. Useful to skip the beginning of a long sequence of patterns while developing longer pieces.
	

ARGUMENT:: tempoclock
a TempoClock. If none is provided, TempoClock.default will be used.

ARGUMENT:: start_time
time to skip

returns:: nil
METHOD:: stop
	Force stops playing the timeline.
	

returns:: nil
METHOD:: asView
	returns a View containing the timeline which can be embedded in a Layout.
	

returns:: a View
METHOD:: plot
	creates a window and embeds the timeline into it and displays it
	

returns:: a Window
METHOD:: prInternalnewcounter
	generates a new unique counter value. Internal usage.
	

returns:: a new integer
METHOD:: prInternalnewplotcounter
	generates a new unique counter symbol. Internal usage.
	

returns:: a new symbol

EXAMPLES::

code::
(
var timeline = ScTimeline();
var pianoslow = Pbind();
var pianofast = Pbind();
var strings = Pbind();
var brass = Pbind();
var percussion = Pbind();
var newtempo = Pbind();
var gong = Pbind();
timeline.schedBeat(0, 60, pianoslow, "piano 1", Color.red);
timeline.schedBeat(90, 182, pianoslow, "piano 1", Color.red);
timeline.schedBeat(20, 182, pianofast, "piano 2", Color.red);
timeline.schedBeat(60, 140, strings, "strings", Color.blue);
timeline.schedBeat(90, 182, brass, "brass 1", Color.green);
timeline.schedBeat(130, 182, brass, "brass 2", Color.green);
timeline.schedBeat(160, 182, brass, "brass 3", Color.green);
timeline.schedBeat(90, 182, percussion, "percussion", Color.gray);
timeline.schedBeatNumber(176, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(177, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(178, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(179, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(180, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(181, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(182, 1, newtempo, "tempo", Color.black);
timeline.schedBeatNumber(183, 1, gong, "gong", Color.magenta);

// play the timeline
timeline.play; // the Pbinds are empty, so you won't hear anything...

// stop playing the timeline
timeline.stop;

// plotting: first way: just create new window with timeline
timeline.plot;

// plotting: second way: embed into your own ui
w = Window.new(bounds:Rect(200,200,1200,300));
w.layout_(VLayout(timeline.asView));
w.front;
)

::
